USER GUIDE

Python&DIAdem Kopter Data Analysis Tool
    
    -> written by Alejandro Valverde LÃ³pez

-> DIAdem is used to extract the data in .csv format 
-> A python program does the post-processing of the previously saved data

%%%%%%%%%%%%%%%%%%
PYTHON INSTALLATION
%%%%%%%%%%%%%%%%%%
-> Software installation
Installed latest python release from https://www.python.org/. Preferably install it with admin rights.  

-> Packages installation:
In CMD type: python -m pip install --user numpy scipy matplotlib ipython jupyter pandas sympy nose

-> Environment variables
Add "python" to the admin or user system environment variables, depending of the type of installation which was performed.

%%%%%%%%%%%%%%%%%%
PYTHON PROGRAM EXECUTION
%%%%%%%%%%%%%%%%%%
Program needs to be executed via the command window. Type:

    -> python main.py [-options]

Example: python main.py -f filesToLoad_gauges_P3_FTI.txt -n f -m rs -o f -s f,t -a f -c f -w f -l t -r 99-FT25 -v ENG_TMP_CPT_AIR

The [-options] are written one after each other, separated by spaces. They can be written in any other. The available options are of two kinds:

    -> Group A:
    These are used to load the input parameters to the program.

        -> -f, -fileName:
        The input to this option is a test with the name of the file including the .txt extension. This file contains 
        all the addresses of all the files containing data from the actuator. Additionally, they allow to input additional 
        information for each of the variables of the test. They need to be stored in a folder named 'InputFiles'.
        Example values: 'filesToLoad_general_TRbladeholder.txt', 'filesToLoad_actuator_OCLoad1.txt'

        -> -v, -variables:
        Indication of the test variables to be loaded, separated by comas. Examples:
            -> -v PitchLinkFlexible,PitchLinkMain
            -> -v CNT_DST_COL,CNT_DST_LAT,CNT_DST_LNG,CNT_DST_BST_COL,CNT_DST_BST_LAT,CNT_DST_BST_LNG
            -> -v BendingMoment,MyBlade,MyLoadcell,MzBlade,CF

        -> -m, -magnitudes:
        Indicates the data magnitudes to be loaded, separated by comas. Examples:
            -> -m rs : Loading of re-sampled data, unmodified
            -> -m di : Loading of re-sampled differentiated data, unmodified
            -> -m lp0.1 : Loading of the low-pass filtered data with 0.1Hz cut-off frequency
            -> -m hp0.1 : Loading of the high-pass filtered data with 0.1Hz cut-off frequency

        -> -r, -rangeFileID:
        Indication of the range of test steps/runs to be loaded, separated by comas. Examples:
            -> -r 7,8
            -> -r 3-SN002-1.3,10-SN0012-1.3,8-SN002-2.4
            -> -r 31-FT07,32-FT07,33-FT07,34-FT08,35-FT09,36-FT09,37-FT09

        -> -c, -correctionFilter:
        Offset correction to be applied to the filtered data. Sums the indicated quantity to the filter data. Examples:
            -> -c f : Do not to apply correction
            -> -c 81.15 : Adds 81.15 to all the data points of the low-pass data and -81.15 to the high-pass data imported
            -> -c -81.15 : Adds -81.15 to all the data points of the low-pass data and 81.15 to the high-pass data imported

    -> Group B:
    These are used to the choose different ways of executing the code. In most of the cases, they allow two inputs: to enable 
    the option, then 'true' or 't' can be written. On the other hand, to disable the option, one can write 'false' or 'f'

        -> -s, -saveFigure:
        This parameter defines what to do with the plots created. The first position of this parameter indicates whether to 
        save the plots in the working folder and the second position indicates whether the plots should be shown in the screen 
        or not. Possible values:
            -> -s f,f : Plots are not saved nor shown
            -> -s f,t : Plots are not saved but shown
            -> -s t,f : Plots are saved but not shown
            -> -s t,t : Plots are saved and shown

        -> -n, -multipleYaxisInSameFigure:
        Enables the possibility to split the figures into multiple plots with a shared y-axis. Possible values:
            -> -n t : All the variables will be shown in a single plot with multiple axis, one per variable.
            -> -n f : If all the input variables are expressed in the same physical units, then the results will be plotted in 
                    a single figure, with different lines for each variable. If the variables have different units, then one new 
                    figure will be created per variable.

        -> -o, -testOrder:
        This parameter defines whether a reference of the loads prescribed in the Test Order shall be included in the resulting plots.
        The value of the order values shall have been defined in the input file. Possible values:
            -> -o t : Plot reference of the Test Order prescribed loads
            -> -o f : Do not plot reference of the Test Order prescribed loads

        -> -a, -additionalCals:
        This parameter allows the program to execute specific code lines which have been created to give an answer to particular  data 
        analysis tasks. During normal operation, this option has to be disabled. Possible values:
            -> -n [1,2,4,5,...] : Each number executes one particular portion of the code
            -> -n f : Normal operation

        -> -w, -writeStepResultsToFileFlag:
        When this option is enabled, the program will create one file per variable with the maximum, mean and minimum values recorded 
        during each of the computed steps. Possible values:
            -> -w t : Enable the output of a summary file per variable
            -> -w f : Disable the output of a summary file per variable

        -> -l, -divisionLineForPlotsFlag:
        When this option is enabled, the program will draw red dashed lines to define the division between consecutive test steps in
        the main figure. Possible values:
            -> -l t : Draw division line between test steps
            -> -l f : Do not draw division line between test steps

%%%%%%%%%%%%%%%%%%
DIADEM CODE EXECUTION
%%%%%%%%%%%%%%%%%%
As part of the present tool, DIAdem is used to extract the data and save it in a format which can be read by Python (.csv).
To run DIAdem more efficiently, a VBS (Visual Basic Script) can be executed from DIAdem. The following files are needed to execute the 
DIAdem script:

    -> "main_DIAdem_extractData.vbs": This is the main script. It loads its input information from the other scripts. It loads the data, performs a 
    re-sampling operation, if applicable; and saves the variables in the .csv format. This files shall be not modified by the user.

    -> "testToImport.vbs": Defines the execution input file, or files, which is going to be imported. Define 

    -> "[anyName].vbs" : Contains 

This section describes how to modify the template of the input 